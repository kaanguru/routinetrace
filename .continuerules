# RoutineTrace

RoutineTrace is a multi-platform to-do list application focused on daily, weekly, and monthly task management. The app displays the success percentage of routine, recurring tasks.

## Project Context

Main purpose of this project is to create a "routine to-do list" Android app using ReactNative Expo.

## Database Schema Design:

### PostgreSQL Definition of **tasks** table:

```sql
create table public.tasks (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  title character varying not null,
  notes text null,
  user_id uuid not null default auth.uid (),
  updated_at timestamp with time zone null,
  is_complete boolean not null default false,
  position smallint null,
  repeat_on_wk days_of_week[] null,
  repeat_frequency smallint null,
  repeat_period public.repeat_period null,
  constraint tasks_pkey primary key (id),
  constraint tasks_user_id_fkey foreign KEY (user_id) references auth.users (id) on update CASCADE on delete CASCADE
) TABLESPACE pg_default;

create index IF not exists idx_tasks_repeat_on_wk on public.tasks using gin (repeat_on_wk) TABLESPACE pg_default;
```

### PostgreSQL Definition of **checklistitems** table:

```sql
create table public.checklistitems (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  content character varying not null,
  updated_at timestamp with time zone null,
  position smallint null,
  is_complete boolean not null default false,
  task_id bigint not null,
  constraint checklistitems_pkey primary key (id),
  constraint checklistitems_task_id_fkey foreign KEY (task_id) references tasks (id) on update CASCADE on delete CASCADE
) TABLESPACE pg_default;

create index IF not exists idx_checklistitems_task_id on public.checklistitems using btree (task_id) TABLESPACE pg_default;
```

### PostgreSQL Definition of **health_and_happiness** table:

```sql
create table public.health_and_happiness (
  id smallint generated by default as identity not null,
  health smallint null default '100'::smallint,
  happiness smallint null default '100'::smallint,
  user_id uuid not null default auth.uid (),
  updated_at timestamp with time zone null default now(),
  constraint health_and_happiness_pkey primary key (id),
  constraint unique_user unique (user_id),
  constraint health_and_happiness_user_id_fkey foreign KEY (user_id) references auth.users (id) on update CASCADE on delete CASCADE
) TABLESPACE pg_default;
```

### PostgreSQL Definition of **public.task_completion_history** table:

```sql
create table public.task_completion_history (
  id bigint generated by default as identity not null,
  task_id bigint not null,
  completed_at timestamp with time zone not null default now(),
  constraint task_completion_history_pkey primary key (id),
  constraint task_completion_history_task_id_fkey foreign KEY (task_id) references tasks (id) on update CASCADE on delete CASCADE
) TABLESPACE pg_default;

create index IF not exists idx_task_completion_history_task_id on public.task_completion_history using btree (task_id) TABLESPACE pg_default;
```

### Database Enumerated Types

- days_of_week: Mon, Tue, Wed, Thu, Fri, Sat, Sun

- repeat_period: Daily, Weekly, Monthly, Yearly

## Tech Stack

- react-native + expo
- npm packageManager
- [expo-router](https://docs.expo.dev/router/installation/#quick-start)
- [drawer+tabs](https://docs.expo.dev/router/advanced/drawer/)
- [React Native Elements](https://reactnativeelements.com/)
- [Supabase Database](https://supabase.com/database): Open source, scalable PostgreSQL database trusted by millions; built-in auth, realtime capabilities, branching, and read replicas.
- [Supabase Auth](https://supabase.com/blog/supabase-auth): Supabase Auth: Open-source Firebase alternative for user authentication and authorization with PostgreSQL Row Level Security and policies.
- [TanStack Query (FKA React Query)](https://tanstack.com/query/latest/docs/framework/react/overview)
- [TanStack Form](https://tanstack.com/form/latest)

## State Management

- Don't change utils\supabase.ts file
- Use react-native-async-storage/async-storage for global state when needed
- Use TanStack Query (FKA React Query) for fetching, caching, synchronizing and updating server state
- Use useContext for local state management when needed(https://react.dev/reference/react/hooks#context-hooks)

## Syntax and Formatting

- Use funtional paradigm for all components and hooks.
- No Mutations
- Use "function" keyword for pure functions(not an Asynchronous function and does not have side effects).
- Use "function" keyword for helper pure functions and move them on end of file.
- Require function parameters to be typed as certain immutability
- Don't use syntax that mutates existing objects and arrays via assignment to or deletion of their properties/elements. Use **Readonly** like `export default function Root({ children }: Readonly<{ children: React.ReactNode }>) {...}`
- Use `const` instead of `let`
- Enforce the immutability of types based on patterns
- do not inheritance in classes.

### Neverthrow

- Use Neverthrow and sentry for error handling.
  Neverthrow contains a `Result` type that represents either success (`Ok`) or failure (`Err`).

For asynchronous tasks, `neverthrow` offers a `ResultAsync` class which wraps a `Promise<Result<T, E>>` and gives you the same level of expressivity and control as a regular `Result<T, E>`.

`ResultAsync` is `thenable` meaning it **behaves exactly like a native `Promise<Result>`** ... except you have access to the same methods that `Result` provides without having to `await` or `.then` the promise!

#### Top-Level API

`neverthrow` exposes the following:

- `ok` convenience function to create an `Ok` variant of `Result`
- `err` convenience function to create an `Err` variant of `Result`
- `Result` Type as well as namespace / object from which to call `Result.fromThrowable`, Result.combine.
- `okAsync` convenience function to create a `ResultAsync` containing an `Ok` type `Result`
- `errAsync` convenience function to create a `ResultAsync` containing an `Err` type `Result`

Example Error Handling:

```ts
// Example Error Handling
import { Result, ok, err, errAsync, ResultAsync } from "neverthrow";
import reportError from "utils/reportError.ts";

function divide(x: number, y: number): Result<number, Error> {
  return y === 0 ? err(new Error("Cannot divide by zero.")) : ok(x / y);
}

// Sync usage
const syncResult = divide(10, 0);
reportError(syncResult);

// Async usage
// We can create a synchronous method that returns a ResultAsync
function addUserToDatabase(user: User): ResultAsync<User, Error> {
  if (user.name.length < 3) {
    // Throw a async result from a synchronous block thanks to the errAsync helper
    return errAsync(new Error("Username is too short"));
  }

  // Wrap the async method into a ResultAsync thanks to fromPromise
  // The seconds argument catches the error from the promise
  return ResultAsync.fromPromise(
    insertIntoDb(user),
    () => new Error("Database error")
  );
}
const asyncResult = addUserToDatabase({ name: "John" });
reportError(asyncResult);
// Continue processing with `syncResult or asyncResult`...
```

## Database Types

- Use the generated types provided by Supabase shorthands for accessing tables and enums.
  like:

```ts
import { Tables } from "~/database.types";
const task: Tables<"tasks"> = {
  id: 1,
  title: "Task 1",
  notes: "Description 1",
  is_complete: false,
  created_at: new Date().toISOString(),
  updated_at: new Date().toISOString(),
};
```

## UI and Styling

- Use React Native Elements (RNE) for UI components.
  `import { Button } from '@rneui/themed';`
- Use the `@rneui/themed` package for UI components.

## Fonts

    Inter_900Black,
    DelaGothicOne_400Regular,
    UbuntuMono_400Regular,
    Ubuntu_400Regular,
    Ubuntu_500Medium,
    Ubuntu_700Bold,

## Colors

    Primary: '#ff006e',
    Info: '#1982C4',
    Success: '#8AC926',
    Link: '#8AC926',
    Warning: '#FF0010',
    White: '#FFFAEB',
    Black: '#00173D',

#FFEFC2 amber-100
#FEBA9A red-300
#FF006E pink-600
#4F10A8 violet-900
#001F52 sky-950
